/* Auto-generated by genmsg_cpp for file /home/billy/robotics/maggie/components/common/dynamixel_hardware_interface/srv/RestartController.srv */
#ifndef DYNAMIXEL_HARDWARE_INTERFACE_SERVICE_RESTARTCONTROLLER_H
#define DYNAMIXEL_HARDWARE_INTERFACE_SERVICE_RESTARTCONTROLLER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace dynamixel_hardware_interface
{
template <class ContainerAllocator>
struct RestartControllerRequest_ {
  typedef RestartControllerRequest_<ContainerAllocator> Type;

  RestartControllerRequest_()
  : name()
  {
  }

  RestartControllerRequest_(const ContainerAllocator& _alloc)
  : name(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;


  typedef boost::shared_ptr< ::dynamixel_hardware_interface::RestartControllerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamixel_hardware_interface::RestartControllerRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RestartControllerRequest
typedef  ::dynamixel_hardware_interface::RestartControllerRequest_<std::allocator<void> > RestartControllerRequest;

typedef boost::shared_ptr< ::dynamixel_hardware_interface::RestartControllerRequest> RestartControllerRequestPtr;
typedef boost::shared_ptr< ::dynamixel_hardware_interface::RestartControllerRequest const> RestartControllerRequestConstPtr;


template <class ContainerAllocator>
struct RestartControllerResponse_ {
  typedef RestartControllerResponse_<ContainerAllocator> Type;

  RestartControllerResponse_()
  : success(false)
  {
  }

  RestartControllerResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


  typedef boost::shared_ptr< ::dynamixel_hardware_interface::RestartControllerResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamixel_hardware_interface::RestartControllerResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RestartControllerResponse
typedef  ::dynamixel_hardware_interface::RestartControllerResponse_<std::allocator<void> > RestartControllerResponse;

typedef boost::shared_ptr< ::dynamixel_hardware_interface::RestartControllerResponse> RestartControllerResponsePtr;
typedef boost::shared_ptr< ::dynamixel_hardware_interface::RestartControllerResponse const> RestartControllerResponseConstPtr;

struct RestartController
{

typedef RestartControllerRequest Request;
typedef RestartControllerResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct RestartController
} // namespace dynamixel_hardware_interface

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dynamixel_hardware_interface::RestartControllerRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dynamixel_hardware_interface::RestartControllerRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dynamixel_hardware_interface::RestartControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c1f3d28f1b044c871e6eff2e9fc3c667";
  }

  static const char* value(const  ::dynamixel_hardware_interface::RestartControllerRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc1f3d28f1b044c87ULL;
  static const uint64_t static_value2 = 0x1e6eff2e9fc3c667ULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamixel_hardware_interface::RestartControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamixel_hardware_interface/RestartControllerRequest";
  }

  static const char* value(const  ::dynamixel_hardware_interface::RestartControllerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dynamixel_hardware_interface::RestartControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string name\n\
\n\
";
  }

  static const char* value(const  ::dynamixel_hardware_interface::RestartControllerRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dynamixel_hardware_interface::RestartControllerResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dynamixel_hardware_interface::RestartControllerResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dynamixel_hardware_interface::RestartControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::dynamixel_hardware_interface::RestartControllerResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamixel_hardware_interface::RestartControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamixel_hardware_interface/RestartControllerResponse";
  }

  static const char* value(const  ::dynamixel_hardware_interface::RestartControllerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dynamixel_hardware_interface::RestartControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
\n\
";
  }

  static const char* value(const  ::dynamixel_hardware_interface::RestartControllerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::dynamixel_hardware_interface::RestartControllerResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dynamixel_hardware_interface::RestartControllerRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RestartControllerRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dynamixel_hardware_interface::RestartControllerResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RestartControllerResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<dynamixel_hardware_interface::RestartController> {
  static const char* value() 
  {
    return "d08a3b641c2f8680fbdfb1ea2e17a3e1";
  }

  static const char* value(const dynamixel_hardware_interface::RestartController&) { return value(); } 
};

template<>
struct DataType<dynamixel_hardware_interface::RestartController> {
  static const char* value() 
  {
    return "dynamixel_hardware_interface/RestartController";
  }

  static const char* value(const dynamixel_hardware_interface::RestartController&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<dynamixel_hardware_interface::RestartControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d08a3b641c2f8680fbdfb1ea2e17a3e1";
  }

  static const char* value(const dynamixel_hardware_interface::RestartControllerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<dynamixel_hardware_interface::RestartControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamixel_hardware_interface/RestartController";
  }

  static const char* value(const dynamixel_hardware_interface::RestartControllerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<dynamixel_hardware_interface::RestartControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d08a3b641c2f8680fbdfb1ea2e17a3e1";
  }

  static const char* value(const dynamixel_hardware_interface::RestartControllerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<dynamixel_hardware_interface::RestartControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamixel_hardware_interface/RestartController";
  }

  static const char* value(const dynamixel_hardware_interface::RestartControllerResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // DYNAMIXEL_HARDWARE_INTERFACE_SERVICE_RESTARTCONTROLLER_H

