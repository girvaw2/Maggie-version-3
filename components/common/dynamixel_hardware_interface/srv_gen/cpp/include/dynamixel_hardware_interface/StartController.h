/* Auto-generated by genmsg_cpp for file /home/billy/robotics/maggie/components/common/dynamixel_hardware_interface/srv/StartController.srv */
#ifndef DYNAMIXEL_HARDWARE_INTERFACE_SERVICE_STARTCONTROLLER_H
#define DYNAMIXEL_HARDWARE_INTERFACE_SERVICE_STARTCONTROLLER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace dynamixel_hardware_interface
{
template <class ContainerAllocator>
struct StartControllerRequest_ {
  typedef StartControllerRequest_<ContainerAllocator> Type;

  StartControllerRequest_()
  : name()
  , port()
  {
  }

  StartControllerRequest_(const ContainerAllocator& _alloc)
  : name(_alloc)
  , port(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _port_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  port;


  typedef boost::shared_ptr< ::dynamixel_hardware_interface::StartControllerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamixel_hardware_interface::StartControllerRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StartControllerRequest
typedef  ::dynamixel_hardware_interface::StartControllerRequest_<std::allocator<void> > StartControllerRequest;

typedef boost::shared_ptr< ::dynamixel_hardware_interface::StartControllerRequest> StartControllerRequestPtr;
typedef boost::shared_ptr< ::dynamixel_hardware_interface::StartControllerRequest const> StartControllerRequestConstPtr;


template <class ContainerAllocator>
struct StartControllerResponse_ {
  typedef StartControllerResponse_<ContainerAllocator> Type;

  StartControllerResponse_()
  : success(false)
  {
  }

  StartControllerResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


  typedef boost::shared_ptr< ::dynamixel_hardware_interface::StartControllerResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamixel_hardware_interface::StartControllerResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StartControllerResponse
typedef  ::dynamixel_hardware_interface::StartControllerResponse_<std::allocator<void> > StartControllerResponse;

typedef boost::shared_ptr< ::dynamixel_hardware_interface::StartControllerResponse> StartControllerResponsePtr;
typedef boost::shared_ptr< ::dynamixel_hardware_interface::StartControllerResponse const> StartControllerResponseConstPtr;

struct StartController
{

typedef StartControllerRequest Request;
typedef StartControllerResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct StartController
} // namespace dynamixel_hardware_interface

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dynamixel_hardware_interface::StartControllerRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dynamixel_hardware_interface::StartControllerRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dynamixel_hardware_interface::StartControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f395cbf498fbf3eca71b1d4bf925badb";
  }

  static const char* value(const  ::dynamixel_hardware_interface::StartControllerRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf395cbf498fbf3ecULL;
  static const uint64_t static_value2 = 0xa71b1d4bf925badbULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamixel_hardware_interface::StartControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamixel_hardware_interface/StartControllerRequest";
  }

  static const char* value(const  ::dynamixel_hardware_interface::StartControllerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dynamixel_hardware_interface::StartControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string name\n\
string port\n\
\n\
";
  }

  static const char* value(const  ::dynamixel_hardware_interface::StartControllerRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dynamixel_hardware_interface::StartControllerResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dynamixel_hardware_interface::StartControllerResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dynamixel_hardware_interface::StartControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::dynamixel_hardware_interface::StartControllerResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamixel_hardware_interface::StartControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamixel_hardware_interface/StartControllerResponse";
  }

  static const char* value(const  ::dynamixel_hardware_interface::StartControllerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dynamixel_hardware_interface::StartControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
\n\
";
  }

  static const char* value(const  ::dynamixel_hardware_interface::StartControllerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::dynamixel_hardware_interface::StartControllerResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dynamixel_hardware_interface::StartControllerRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
    stream.next(m.port);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StartControllerRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dynamixel_hardware_interface::StartControllerResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StartControllerResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<dynamixel_hardware_interface::StartController> {
  static const char* value() 
  {
    return "ee08ec73d1ee598e2b14b822768462c5";
  }

  static const char* value(const dynamixel_hardware_interface::StartController&) { return value(); } 
};

template<>
struct DataType<dynamixel_hardware_interface::StartController> {
  static const char* value() 
  {
    return "dynamixel_hardware_interface/StartController";
  }

  static const char* value(const dynamixel_hardware_interface::StartController&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<dynamixel_hardware_interface::StartControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ee08ec73d1ee598e2b14b822768462c5";
  }

  static const char* value(const dynamixel_hardware_interface::StartControllerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<dynamixel_hardware_interface::StartControllerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamixel_hardware_interface/StartController";
  }

  static const char* value(const dynamixel_hardware_interface::StartControllerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<dynamixel_hardware_interface::StartControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ee08ec73d1ee598e2b14b822768462c5";
  }

  static const char* value(const dynamixel_hardware_interface::StartControllerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<dynamixel_hardware_interface::StartControllerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamixel_hardware_interface/StartController";
  }

  static const char* value(const dynamixel_hardware_interface::StartControllerResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // DYNAMIXEL_HARDWARE_INTERFACE_SERVICE_STARTCONTROLLER_H

