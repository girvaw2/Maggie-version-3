"""autogenerated by genpy from dynamixel_hardware_interface/MotorState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotorState(genpy.Message):
  _md5sum = "96055d7680f5f0b2177ce65f44ce437f"
  _type = "dynamixel_hardware_interface/MotorState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# all values are in encoder units unless otherwise specified

float64 timestamp       # motor state is at this time

int32 id                # motor id
int32 target_position   # commanded position
int32 target_velocity   # commanded velocity
int32 position          # current position
int32 velocity          # current velocity
int32 torque_limit      # current torque limit
int32 load              # current load - ratio of applied torque over maximum torque
bool  moving            # whether the motor is currently in motion

int32 voltage           # current voltage (V * 10)
int32 temperature       # current temperature (degrees Celsius)


"""
  __slots__ = ['timestamp','id','target_position','target_velocity','position','velocity','torque_limit','load','moving','voltage','temperature']
  _slot_types = ['float64','int32','int32','int32','int32','int32','int32','int32','bool','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,id,target_position,target_velocity,position,velocity,torque_limit,load,moving,voltage,temperature

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0.
      if self.id is None:
        self.id = 0
      if self.target_position is None:
        self.target_position = 0
      if self.target_velocity is None:
        self.target_velocity = 0
      if self.position is None:
        self.position = 0
      if self.velocity is None:
        self.velocity = 0
      if self.torque_limit is None:
        self.torque_limit = 0
      if self.load is None:
        self.load = 0
      if self.moving is None:
        self.moving = False
      if self.voltage is None:
        self.voltage = 0
      if self.temperature is None:
        self.temperature = 0
    else:
      self.timestamp = 0.
      self.id = 0
      self.target_position = 0
      self.target_velocity = 0
      self.position = 0
      self.velocity = 0
      self.torque_limit = 0
      self.load = 0
      self.moving = False
      self.voltage = 0
      self.temperature = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_d7iB2i.pack(_x.timestamp, _x.id, _x.target_position, _x.target_velocity, _x.position, _x.velocity, _x.torque_limit, _x.load, _x.moving, _x.voltage, _x.temperature))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 45
      (_x.timestamp, _x.id, _x.target_position, _x.target_velocity, _x.position, _x.velocity, _x.torque_limit, _x.load, _x.moving, _x.voltage, _x.temperature,) = _struct_d7iB2i.unpack(str[start:end])
      self.moving = bool(self.moving)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_d7iB2i.pack(_x.timestamp, _x.id, _x.target_position, _x.target_velocity, _x.position, _x.velocity, _x.torque_limit, _x.load, _x.moving, _x.voltage, _x.temperature))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 45
      (_x.timestamp, _x.id, _x.target_position, _x.target_velocity, _x.position, _x.velocity, _x.torque_limit, _x.load, _x.moving, _x.voltage, _x.temperature,) = _struct_d7iB2i.unpack(str[start:end])
      self.moving = bool(self.moving)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_d7iB2i = struct.Struct("<d7iB2i")
