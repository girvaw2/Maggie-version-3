/* Auto-generated by genmsg_cpp for file /home/billy/robotics/maggie/components/common/dynamixel_hardware_interface/msg/MotorState.msg */
#ifndef DYNAMIXEL_HARDWARE_INTERFACE_MESSAGE_MOTORSTATE_H
#define DYNAMIXEL_HARDWARE_INTERFACE_MESSAGE_MOTORSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace dynamixel_hardware_interface
{
template <class ContainerAllocator>
struct MotorState_ {
  typedef MotorState_<ContainerAllocator> Type;

  MotorState_()
  : timestamp(0.0)
  , id(0)
  , target_position(0)
  , target_velocity(0)
  , position(0)
  , velocity(0)
  , torque_limit(0)
  , load(0)
  , moving(false)
  , voltage(0)
  , temperature(0)
  {
  }

  MotorState_(const ContainerAllocator& _alloc)
  : timestamp(0.0)
  , id(0)
  , target_position(0)
  , target_velocity(0)
  , position(0)
  , velocity(0)
  , torque_limit(0)
  , load(0)
  , moving(false)
  , voltage(0)
  , temperature(0)
  {
  }

  typedef double _timestamp_type;
  double timestamp;

  typedef int32_t _id_type;
  int32_t id;

  typedef int32_t _target_position_type;
  int32_t target_position;

  typedef int32_t _target_velocity_type;
  int32_t target_velocity;

  typedef int32_t _position_type;
  int32_t position;

  typedef int32_t _velocity_type;
  int32_t velocity;

  typedef int32_t _torque_limit_type;
  int32_t torque_limit;

  typedef int32_t _load_type;
  int32_t load;

  typedef uint8_t _moving_type;
  uint8_t moving;

  typedef int32_t _voltage_type;
  int32_t voltage;

  typedef int32_t _temperature_type;
  int32_t temperature;


  typedef boost::shared_ptr< ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamixel_hardware_interface::MotorState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MotorState
typedef  ::dynamixel_hardware_interface::MotorState_<std::allocator<void> > MotorState;

typedef boost::shared_ptr< ::dynamixel_hardware_interface::MotorState> MotorStatePtr;
typedef boost::shared_ptr< ::dynamixel_hardware_interface::MotorState const> MotorStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace dynamixel_hardware_interface

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::dynamixel_hardware_interface::MotorState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "96055d7680f5f0b2177ce65f44ce437f";
  }

  static const char* value(const  ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x96055d7680f5f0b2ULL;
  static const uint64_t static_value2 = 0x177ce65f44ce437fULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dynamixel_hardware_interface/MotorState";
  }

  static const char* value(const  ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# all values are in encoder units unless otherwise specified\n\
\n\
float64 timestamp       # motor state is at this time\n\
\n\
int32 id                # motor id\n\
int32 target_position   # commanded position\n\
int32 target_velocity   # commanded velocity\n\
int32 position          # current position\n\
int32 velocity          # current velocity\n\
int32 torque_limit      # current torque limit\n\
int32 load              # current load - ratio of applied torque over maximum torque\n\
bool  moving            # whether the motor is currently in motion\n\
\n\
int32 voltage           # current voltage (V * 10)\n\
int32 temperature       # current temperature (degrees Celsius)\n\
\n\
\n\
";
  }

  static const char* value(const  ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.timestamp);
    stream.next(m.id);
    stream.next(m.target_position);
    stream.next(m.target_velocity);
    stream.next(m.position);
    stream.next(m.velocity);
    stream.next(m.torque_limit);
    stream.next(m.load);
    stream.next(m.moving);
    stream.next(m.voltage);
    stream.next(m.temperature);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MotorState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::dynamixel_hardware_interface::MotorState_<ContainerAllocator> & v) 
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "target_position: ";
    Printer<int32_t>::stream(s, indent + "  ", v.target_position);
    s << indent << "target_velocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.target_velocity);
    s << indent << "position: ";
    Printer<int32_t>::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    Printer<int32_t>::stream(s, indent + "  ", v.velocity);
    s << indent << "torque_limit: ";
    Printer<int32_t>::stream(s, indent + "  ", v.torque_limit);
    s << indent << "load: ";
    Printer<int32_t>::stream(s, indent + "  ", v.load);
    s << indent << "moving: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.moving);
    s << indent << "voltage: ";
    Printer<int32_t>::stream(s, indent + "  ", v.voltage);
    s << indent << "temperature: ";
    Printer<int32_t>::stream(s, indent + "  ", v.temperature);
  }
};


} // namespace message_operations
} // namespace ros

#endif // DYNAMIXEL_HARDWARE_INTERFACE_MESSAGE_MOTORSTATE_H

